//====================================================================
//
// 影[Shadow.h]
// 作成者:吉原飛鳥
// 
// 更新日:2022/01/18	作成
//====================================================================
// 
 //*******************************************************************************
 // インクルード部
 //*******************************************************************************
#include	"Shadow.h"

 //*******************************************************************************
 // 定数・マクロ定義
 //*******************************************************************************

 //*******************************************************************************
 // グローバル変数
 //*******************************************************************************
Camera* g_pShadowCamera;

//==============================================================
//
//	Shadowクラス::コンストラクタ
//	作成者	： 吉原飛鳥
//	戻り値	： void
//	引数		： void
//
//==============================================================
Shadow::Shadow() : m_pCamera(nullptr)
{

}

//==============================================================
//
//	Shadowクラス::デストラクタ
//	作成者	： 吉原飛鳥
//	戻り値	： void
//	引数		： void
//
//==============================================================
Shadow::~Shadow()
{

}

//==============================================================
//
//	Shadowクラス::初期化処理
//	作成者	： 吉原飛鳥
//	戻り値	： bool
//	引数		： void
//
//==============================================================
bool Shadow::Init()
{
	//---テクスチャ読み込み
	LoadTextureFromFile("Assets/Model/Target.png", &m_pShadowTex);

	//---オブジェクトインスタンスの初期化
	GameObject::Init();

	g_pShadowCamera = new Camera;
	g_pShadowCamera->Init();

	//---変数初期化
	m_pos = XMFLOAT3(0.0f, 1.1f, 0.0f);
	m_size = XMFLOAT3(1.0f, 0.0f, 1.0f);
	m_Angle = XMFLOAT3(0.0f, 0.0f, 0.0f);

	m_collisionType = COLLISION_DYNAMIC;

	return true;

}

//==============================================================
//
//	Shadowクラス::終了処理
//	作成者	： 吉原飛鳥
//	戻り値	：	void
//	引数		： void
//
//==============================================================
void Shadow::Uninit()
{
	//---テクスチャ解放
	SAFE_RELEASE(m_pShadowTex);

	//オブジェクトインスタンス解放
	m_pCamera->Uninit();
	delete m_pCamera;
	GameObject::Uninit();

}

//==============================================================
//
//	BulletTargetクラス::更新
//	作成者	： 吉原飛鳥
//	戻り値	： void
//	引数		： void
//
//==============================================================
void Shadow::Update()
{
	//---何もしない
}

//==============================================================
//
//	BulletTargetクラス::更新
//	作成者	： 吉原飛鳥
//	戻り値	： void
//	引数		： void
//
//==============================================================
void Shadow::Draw()
{
	SHADER->Bind(VS_WORLD, PS_UNLIT);
	SHADER->SetTexture(m_pShadowTex);

	SHADER->SetWorld
	(
		XMMatrixScaling(m_size.x, m_size.y, m_size.z) *
		XMMatrixRotationY(-m_Angle.y) *
		XMMatrixTranslation(m_pos.x, m_pos.y, m_pos.z)
	);

	GameObject::Draw();

	SHADER->SetTexture(NULL);
}

//==============================================================
//
//	BulletTargetクラス::更新
//	作成者	： 吉原飛鳥
//	戻り値	： void
//	引数		： void
//
//==============================================================
XMFLOAT3 Shadow::GetShadowPos()
{
	return m_pos;
}

//==============================================================
//
//	BulletTargetクラス::更新
//	作成者	： 吉原飛鳥
//	戻り値	： void
//	引数		： void
//
//==============================================================
void Shadow::CreateShadow(XMFLOAT3 pos,float radius)
{

}